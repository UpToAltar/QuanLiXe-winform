<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="labelControl4.ImageOptions.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>