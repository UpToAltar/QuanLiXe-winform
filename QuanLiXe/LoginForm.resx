<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="labelControl4.ImageOptions.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>